{"version":3,"sources":["components/ImageViewer.js","components/VideoViewer.js","components/AudioListener.js","components/HomePage.js","components/App.js","serviceWorker.js","index.js"],"names":["ipfs","require","ipfsClient","host","port","protocol","apiPath","ImageViewer","props","uploadFile","title","console","log","add","state","file","pin","then","result","setState","loading","path","contract","methods","mint","send","from","account","once","receipt","ipfsHash","files","captureFile","event","preventDefault","temp","target","reader","window","FileReader","readAsArrayBuffer","onloadend","totalSupply","bind","a","this","loadWeb3","loadBlockchainData","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","net","getId","networkId","NFT","networks","Contract","abi","call","View","style","flex","alignItems","justifyContent","Button","onPress","navigation","navigate","onSubmit","tempTitle","fileTitle","value","type","accept","onChange","className","id","ref","input","placeholder","required","map","key","src","width","heigth","Component","VideoViewer","controls","AudioListener","contractAddress","networkData","address","HomePage","class","href","App","AppContainer","AppNavigator","createStackNavigator","Home","screen","Image","Video","MP3","createAppContainer","Boolean","location","hostname","match","root","document","getElementById","ReactDOM","render","basename","process","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.48bd9415.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {Button, View} from 'react-native';\r\nimport Web3 from 'web3';\r\nimport NFT from '../build/IpfsNft.json'\r\n\r\n\r\nconst ipfsClient = require('ipfs-http-client')\r\nconst ipfs = ipfsClient({host: 'ipfs.infura.io', port: 5001, protocol: 'https', apiPath: '/api/v0'}) \r\n\r\n\r\n\r\nclass ImageViewer extends Component {\r\n\r\n  async componentWillMount() {\r\n    await this.loadWeb3()\r\n    await this.loadBlockchainData()\r\n  }\r\n\r\n  async loadWeb3() {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    }\r\n    else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else {\r\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n    }\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3\r\n    const accounts = await web3.eth.getAccounts()\r\n    this.setState({account: accounts[0]})\r\n\r\n    const networkId = await web3.eth.net.getId()\r\n    const networkData = NFT.networks[networkId]\r\n    if(networkData) \r\n    {\r\n      const contract = new web3.eth.Contract(NFT.abi, \"0x279a5c3F134E3B187BF7e51fE552e5A8117301E3\")\r\n      this.setState({ contract })\r\n      const totalSupply = await contract.methods.totalSupply().call()\r\n      this.setState({ totalSupply })\r\n\r\n    } \r\n    else \r\n    {\r\n      window.alert('Smart contract not deployed to detected network.')\r\n    }\r\n  }\r\n\r\n\r\n  uploadFile = (title) => {\r\n    \r\n    console.log(\"Submitting file to IPFS...\")\r\n    ipfs.add(this.state.file, { pin: true }).then(result => {\r\n      this.setState({ loading: true })\r\n      console.log('hash ', result.path)\r\n      this.state.contract.methods.mint(result.path, title).send({from: this.state.account})\r\n      .once('receipt', (receipt) => {\r\n          this.setState({\r\n            ipfsHash: result.path,\r\n            files: [...this.state.files, result.path],\r\n            loading: false\r\n          })\r\n      })\r\n    })\r\n    /*\r\n    const fileHash = await bee.uploadData(this.state.file)\r\n\r\n    this.state.contract.methods.mint(fileHash, title).send({from: this.state.account})\r\n      .once('receipt', (receipt) => {\r\n        this.setState({\r\n          files: [...this.state.files, title],\r\n          loading: false\r\n        })\r\n      })\r\n    */\r\n  }\r\n\r\n  captureFile = event => \r\n  {\r\n    console.log('capturing ', this.state.file)\r\n    event.preventDefault()\r\n    const temp = event.target.files[0]\r\n    const reader = new window.FileReader()\r\n    reader.readAsArrayBuffer(temp)\r\n\r\n\r\n\r\n    reader.onloadend = () => {\r\n      this.setState({ file: temp })\r\n      console.log('file', temp)\r\n    }\r\n  }\r\n\r\n\r\n  \r\n\r\n  constructor(props) \r\n  {\r\n    super(props)\r\n    this.state = \r\n    {\r\n      ipfsHash: '',\r\n      file: null,\r\n      account: '',\r\n      contract: null,      \r\n      totalSupply: 0,\r\n      files: [],\r\n      title: null,\r\n      loading: false\r\n    }\r\n    this.uploadFile = this.uploadFile.bind(this)\r\n    this.captureFile = this.captureFile.bind(this)\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\r\n  \r\n      <h1>Image NFT</h1>\r\n\r\n      <Button\r\n      title=\"Home Page\"\r\n      onPress={() => this.props.navigation.navigate('Home')}\r\n      />\r\n\r\n      <h3></h3>\r\n\r\n\r\n      <form onSubmit={(event) => {\r\n          event.preventDefault()\r\n          const tempTitle = this.fileTitle.value\r\n          this.uploadFile(tempTitle)\r\n          this.setState({title: tempTitle})\r\n        }}>\r\n          &nbsp;\r\n\r\n\r\n          <input \r\n            type='file' \r\n            accept=\".jpg, .png, .jpeg\" \r\n            onChange={this.captureFile}\r\n          />\r\n          <div className=\"form-group mr-sm-2\">\r\n          <h1> </h1>\r\n\r\n          <input\r\n            id=\"fileTitle\"\r\n            type=\"text\"\r\n            ref={(input) => {this.fileTitle = input}}\r\n            className=\"form-control-sm\"\r\n            placeholder=\"Title...\"\r\n            required \r\n          />\r\n          </div>\r\n          <input\r\n          type='submit'\r\n          className='btn btn-block btn-primary'\r\n          value='MINT'\r\n          />\r\n      </form>\r\n      \r\n      <div className=\"row text-center\">\r\n      { \r\n        this.state.files.map((file, title, key) => {\r\n        return(\r\n          <div key={key} className=\"col-md-6 pt-2 \"> \r\n          <img \r\n            src={`https://ipfs.io/ipfs/${file}`} \r\n            width=\"480\"\r\n            heigth= \"480\"\r\n          />\r\n          <div>IPFS hash: {file}</div>\r\n          </div>\r\n        )})\r\n      }\r\n      </div> \r\n      </View>\r\n    )\r\n  }\r\n}\r\nexport default ImageViewer;","import React, { Component } from 'react';\r\nimport {Button, View} from 'react-native';\r\nimport Web3 from 'web3';\r\nimport NFT from '../build/IpfsNft.json'\r\n\r\n\r\nconst ipfsClient = require('ipfs-http-client')\r\nconst ipfs = ipfsClient({host: 'ipfs.infura.io', port: 5001, protocol: 'https', apiPath: '/api/v0'}) \r\n\r\n\r\n\r\nclass VideoViewer extends Component {\r\n\r\n  async componentWillMount() {\r\n    await this.loadWeb3()\r\n    await this.loadBlockchainData()\r\n  }\r\n\r\n  async loadWeb3() {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    }\r\n    else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else {\r\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n    }\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3\r\n    const accounts = await web3.eth.getAccounts()\r\n    this.setState({account: accounts[0]})\r\n\r\n    const networkId = await web3.eth.net.getId()\r\n    const networkData = NFT.networks[networkId]\r\n    if(networkData) \r\n    {\r\n      const contract = new web3.eth.Contract(NFT.abi, \"0x279a5c3F134E3B187BF7e51fE552e5A8117301E3\")\r\n      this.setState({ contract })\r\n      const totalSupply = await contract.methods.totalSupply().call()\r\n      this.setState({ totalSupply })\r\n\r\n    } \r\n    else \r\n    {\r\n      window.alert('Smart contract not deployed to detected network.')\r\n    }\r\n  }\r\n\r\n\r\n  uploadFile = (title) => {\r\n    \r\n    console.log(\"Submitting file to IPFS...\")\r\n    ipfs.add(this.state.file, { pin: true }).then(result => {\r\n      this.setState({ loading: true })\r\n      console.log('hash ', result.path)\r\n      this.state.contract.methods.mint(result.path, title).send({from: this.state.account})\r\n      .once('receipt', (receipt) => {\r\n          this.setState({\r\n            ipfsHash: result.path,\r\n            files: [...this.state.files, result.path],\r\n            loading: false\r\n          })\r\n      })\r\n    })\r\n    /*\r\n    const fileHash = await bee.uploadData(this.state.file)\r\n\r\n    this.state.contract.methods.mint(fileHash, title).send({from: this.state.account})\r\n      .once('receipt', (receipt) => {\r\n        this.setState({\r\n          files: [...this.state.files, title],\r\n          loading: false\r\n        })\r\n      })\r\n    */\r\n  }\r\n\r\n  captureFile = event => \r\n  {\r\n    console.log('capturing ', this.state.file)\r\n    event.preventDefault()\r\n    const temp = event.target.files[0]\r\n    const reader = new window.FileReader()\r\n    reader.readAsArrayBuffer(temp)\r\n\r\n\r\n\r\n    reader.onloadend = () => {\r\n      this.setState({ file: temp })\r\n      console.log('file', temp)\r\n    }\r\n  }\r\n\r\n\r\n  \r\n\r\n  constructor(props) \r\n  {\r\n    super(props)\r\n    this.state = \r\n    {\r\n      ipfsHash: '',\r\n      file: null,\r\n      account: '',\r\n      contract: null,      \r\n      totalSupply: 0,\r\n      files: [],\r\n      title: null,\r\n      loading: false\r\n    }\r\n    this.uploadFile = this.uploadFile.bind(this)\r\n    this.captureFile = this.captureFile.bind(this)\r\n  }\r\n\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\r\n  \r\n      <h1>Video NFT</h1>\r\n\r\n      <Button\r\n      title=\"Home Page\"\r\n      onPress={() => this.props.navigation.navigate('Home')}\r\n      />\r\n\r\n    <h3></h3>\r\n\r\n    <form onSubmit={(event) => {\r\n        event.preventDefault()\r\n        const tempTitle = this.fileTitle.value\r\n        this.uploadFile(tempTitle)\r\n        this.setState({title: tempTitle})\r\n      }}>\r\n        &nbsp;\r\n\r\n\r\n        <input \r\n          type='file' \r\n          accept=\".mp4, .wmv, .mov\"\r\n          //accept=\".mp4\" \r\n          onChange={this.captureFile}\r\n        />\r\n        <div className=\"form-group mr-sm-2\">\r\n        <h1> </h1>\r\n\r\n        <input\r\n          id=\"fileTitle\"\r\n          type=\"text\"\r\n          ref={(input) => {this.fileTitle = input}}\r\n          className=\"form-control-sm\"\r\n          placeholder=\"Title...\"\r\n          required \r\n        />\r\n        </div>\r\n        <input\r\n        type='submit'\r\n        className='btn btn-block btn-primary'\r\n        value='MINT'\r\n        />\r\n    </form>\r\n      \r\n      <div className=\"row text-center\">\r\n      { \r\n        this.state.files.map((file, key) => {\r\n        return(\r\n          <div key={key} className=\"col-md-6 pt-2 \"> \r\n          <video \r\n            src={`https://ipfs.io/ipfs/${file}`} \r\n            width=\"480\"\r\n            heigth= \"480\"\r\n            controls\r\n          />\r\n          <div>IPFS hash: {file}</div>\r\n          </div>\r\n        )})\r\n      }\r\n      </div> \r\n      </View>\r\n    )\r\n  }\r\n}\r\n\r\nexport default VideoViewer;\r\n\r\n","import React, { Component } from 'react';\r\nimport {Button, View} from 'react-native';\r\nimport Web3 from 'web3';\r\nimport NFT from '../build/IpfsNft.json'\r\n\r\n\r\nconst ipfsClient = require('ipfs-http-client')\r\nconst ipfs = ipfsClient({host: 'ipfs.infura.io', port: 5001, protocol: 'https', apiPath: '/api/v0'}) \r\n\r\n\r\n\r\nclass AudioListener extends Component {\r\n\r\n  async componentWillMount() {\r\n    await this.loadWeb3()\r\n    await this.loadBlockchainData()\r\n  }\r\n\r\n  async loadWeb3() {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    }\r\n    else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else {\r\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n    }\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3\r\n    const accounts = await web3.eth.getAccounts()\r\n    this.setState({account: accounts[0]})\r\n\r\n    const networkId = await web3.eth.net.getId()\r\n    const networkData = NFT.networks[networkId]\r\n    if(networkData) \r\n    {\r\n      const contract = new web3.eth.Contract(NFT.abi, \"0x279a5c3F134E3B187BF7e51fE552e5A8117301E3\")\r\n      this.setState({contractAddress : networkData.address})\r\n      this.setState({ contract })\r\n      const totalSupply = await contract.methods.totalSupply().call()\r\n      this.setState({ totalSupply })\r\n\r\n    } \r\n    else \r\n    {\r\n      window.alert('Smart contract not deployed to detected network.')\r\n    }\r\n  }\r\n\r\n\r\n  uploadFile = (title) => {\r\n    \r\n    console.log(\"Submitting file to IPFS...\")\r\n    ipfs.add(this.state.file, { pin: true }).then(result => {\r\n      console.log('hash ', result.path)\r\n      this.state.contract.methods.mint(result.path, title).send({from: this.state.account})\r\n      .once('receipt', (receipt) => {\r\n          this.setState({\r\n            ipfsHash: result.path,\r\n            files: [...this.state.files, result.path]\r\n          })\r\n      })\r\n    })\r\n  \r\n    \r\n    /*\r\n    this.setState(prevState => ({\r\n      files: [...prevState.files, this.state.ipfsHash]\r\n    }))\r\n\r\n    this.setState({\r\n      files: [...this.state.files, this.state.ipfsHash]\r\n    })\r\n\r\n\r\n  \r\n    const fileHash = await bee.uploadData(this.state.file)\r\n\r\n    this.state.contract.methods.mint(fileHash, title).send({from: this.state.account})\r\n      .once('receipt', (receipt) => {\r\n        this.setState({\r\n          files: [...this.state.files, title],\r\n          loading: false\r\n        })\r\n      })\r\n    */\r\n  }\r\n\r\n  captureFile = event => \r\n  {\r\n    console.log('capturing ', this.state.file)\r\n    event.preventDefault()\r\n    const temp = event.target.files[0]\r\n    const reader = new window.FileReader()\r\n    reader.readAsArrayBuffer(temp)\r\n\r\n\r\n\r\n    reader.onloadend = () => {\r\n      this.setState({ file: temp })\r\n      console.log('file', temp)\r\n    }\r\n  }\r\n\r\n\r\n  \r\n\r\n  constructor(props) \r\n  {\r\n    super(props)\r\n    this.state = \r\n    {\r\n      ipfsHash: '',\r\n      file: null,\r\n      account: '',\r\n      contract: null,      \r\n      totalSupply: 0,\r\n      files: [],\r\n      title: null,\r\n      contractAddress: null\r\n    }\r\n    this.uploadFile = this.uploadFile.bind(this)\r\n    this.captureFile = this.captureFile.bind(this)\r\n  }\r\n\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\r\n  \r\n      <h1>MP3 NFT</h1>\r\n\r\n      <Button\r\n      title=\"Home Page\"\r\n      onPress={() => this.props.navigation.navigate('Home')}\r\n      />\r\n\r\n    <h3></h3>\r\n\r\n    <form onSubmit={(event) => {\r\n        event.preventDefault()\r\n        const tempTitle = this.fileTitle.value\r\n        this.uploadFile(tempTitle)\r\n        this.setState({title: tempTitle})\r\n      }}>\r\n        &nbsp;\r\n        <input \r\n          type='file' \r\n          accept=\".mp3\"\r\n          //accept=\".mp4\" \r\n          onChange={this.captureFile}\r\n        />\r\n        <div className=\"form-group mr-sm-2\">\r\n        <h1> </h1>\r\n\r\n        <input\r\n          id=\"fileTitle\"\r\n          type=\"text\"\r\n          ref={(input) => {this.fileTitle = input}}\r\n          className=\"form-control-sm\"\r\n          placeholder=\"Title...\"\r\n          required \r\n        />\r\n        </div>\r\n        <input\r\n        type='submit'\r\n        className='btn btn-block btn-primary'\r\n        value='MINT'\r\n        />\r\n    </form>\r\n      \r\n      <div className=\"row text-center\">\r\n      { \r\n        this.state.files.map((file, key) => {\r\n        return(\r\n          <div key={key} className=\"col-md-6 pt-2 \">  \r\n            <audio controls>\r\n              <source src={`https://ipfs.io/ipfs/${file}`} type=\"audio/mpeg\">\r\n              </source>\r\n            </audio>\r\n            <div>IPFS hash: {file}</div>\r\n          </div>\r\n        )})\r\n      }\r\n      </div>\r\n      </View>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AudioListener;\r\n\r\n","import React, { Component } from 'react';\r\nimport {Button, View} from 'react-native'; \r\n\r\n\r\n\r\nclass HomePage extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\r\n  \r\n      <h1>IPFS NFTs</h1>\r\n\r\n      <Button\r\n      title=\"Change to Videos\"\r\n      onPress={() => this.props.navigation.navigate('Video')}\r\n      />\r\n      <h3></h3>\r\n\r\n      <Button\r\n      title=\"Change to Images\"\r\n      onPress={() => this.props.navigation.navigate('Image')}\r\n      />\r\n      <h3></h3>\r\n\r\n\r\n      <Button\r\n      title=\"Change to MP3\"\r\n      onPress={() => this.props.navigation.navigate('MP3')}\r\n      />\r\n      <h1></h1>\r\n\r\n      <div >Currently functioning in the Goerli test network. </div>\r\n      <h3></h3>\r\n\r\n      <div class=\"container\">\r\n      <p>The smart contract does not allow for duplicate titles or hashes, so titles and hashes can only be used once. This is a demonstration of Jared V. Samonte's capabilities in developing in Ethereum, IPFS, Web3.js, the Truffle framework, OpenZeppelin ERC721 library, the Ganache personal blockchain, and Goerli test network.</p>\r\n      </div>\r\n      <a href=\"https://www.linkedin.com/in/jared-samonte-9b9192157/\">LinkedIn Account</a>\r\n      <a href=\"https://github.com/jared-v-samonte/IPFS-NFTs-project\">GitHub Repository</a>\r\n\r\n\r\n      </View>\r\n      \r\n    )\r\n  }\r\n}\r\nexport default HomePage;","import React, {Component} from 'react';\r\nimport { createAppContainer } from \"react-navigation\";\r\nimport {createStackNavigator} from \"react-navigation-stack\";\r\nimport './App.css';\r\nimport ImageViewer from './ImageViewer.js'\r\nimport VideoViewer from './VideoViewer.js'\r\nimport AudioListener from './AudioListener.js'\r\nimport HomePage from './HomePage.js'\r\n\r\n\r\n\r\nclass App extends Component {\r\n  render() \r\n  {\r\n    return(\r\n      <AppContainer />\r\n    )\r\n  }\r\n}\r\n\r\n\r\nconst AppNavigator = createStackNavigator({\r\n  Home: {\r\n    screen: HomePage\r\n  },\r\n  Image: {\r\n    screen: ImageViewer\r\n  },\r\n  Video: {\r\n    screen: VideoViewer\r\n  },\r\n  MP3: {\r\n    screen: AudioListener\r\n  }\r\n});\r\n\r\n\r\nconst AppContainer = createAppContainer(AppNavigator);\r\n\r\nexport default App\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport App from './components/App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport BrowserRouter from 'react-router-dom/BrowserRouter'\r\n\r\n\r\n\r\nconst root = document.getElementById('root')\r\n\r\nif (root !== null) {\r\n  ReactDOM.render((\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n      <App />\r\n    </BrowserRouter>\r\n ), root)\r\n}\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}